<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                            http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd">

	<context:property-placeholder location="classpath*:datasource.properties" />

 	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${footBaller.connection.url}" />
		<property name="username" value="${footBaller.connection.username}" />
		<property name="password" value="${footBaller.connection.password}" />
		<property name="name" value="footBaller" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<property name="connectionProperties" value="config.decrypt=true" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}" />
		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<!-- 超时时间；单位为秒。180秒=3分钟 -->
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${druid.logAbandoned}" />
	</bean> 

 	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">  
        <property name="driverClass" value="com.mysql.jdbc.Driver" />  
        <property name="jdbcUrl" value="${footBaller.connection.url}" />  
        <property name="user" value="${footBaller.connection.username}" />  
        <property name="password" value="${footBaller.connection.password}" />  
        
        当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 
        <property name="acquireIncrement" value="3" />
        
        定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 
		<property name="acquireRetryAttempts" value="30" />
		
		两次连接中间隔时间，单位毫秒。Default: 1000 
		<property name="acquireRetryDelay" value="1000" /> 

		连接关闭时默认将所有未提交的操作回滚。Default: false 
		<property name="autoCommitOnClose" value="false" />  
		
		 获取connnection时测试是否有效
		<property name="testConnectionOnCheckin" value="false" />
		
		
		c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么 
			属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试 使用。Default: null 
		<property name="automaticTestTable" value="c3p0TestTable" /> 
		
		定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意：测试的表必须在初始数据源的时候就存在。Default: null
        <property name="preferredTestQuery" value="select 1 from team where id=1" />
        
         每18000秒检查所有连接池中的空闲连接 Default: 0  
        <property name="idleConnectionTestPeriod" value="18000" />
        
        连接池中保留的最大连接数。Default: 15 
        <property name="maxPoolSize" value="50" />
        
        JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 
			属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 
        <property name="maxStatements" value="0" />
        
        maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。Default: 0 
        <property name="maxStatementsPerConnection" value="100" />
        
        <property name="minPoolSize" value="10" />
        
        当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default: 0 
        <property name="checkoutTimeout" value="0" />
        
        
        最大空闲时间,25000秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 
        <property name="maxIdleTime" value="25000" />
        
        因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。
            建议使用idleConnectionTestPeriod或automaticTestTable 等方法来提升连接测试的性能。Default: false
        <property name="testConnectionOnCheckout" value="false" />
        
        c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 3 
        <property name="numHelperThreads" value="3" /> 
        
    </bean> -->  


	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml" />
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<!-- 默认最大提交，TRUE，每操作一次数据库自动提交 -->
				<prop key="defaultAutoCommit">true</prop>

				<prop key="hibernate.jdbc.batch_size">50</prop>
				<!-- hibernate disables insert batching at the JDBC level transparently 
					if you use an identity identifier generator. You can also do this kind of 
					work in a process where interaction with the second-level cache is completely 
					disabled: -->
				<prop key="hibernate.cache.use_second_level_cache">false</prop>

<!-- 			<prop key="hibernate.jdbc.fetch_size">100</prop>
				<prop key="hibernate.c3p0.timeout">10</prop>
				<prop key="automaticTestTable">Test</prop>
		        <prop key="hibernate.c3p0.max_statements">100</prop>
		        <prop key="hibernate.c3p0.idle_test_period">120</prop>
		        <prop key="hibernate.c3p0.acquire_increment">1</prop>
		        <prop key="hibernate.c3p0.testConnectionOnCheckin">true</prop>
		        <prop key="hibernate.c3p0.testConnectionOnCheckout">true</prop>
		        <prop key="hibernate.c3p0.idleConnectionTestPeriod">18000</prop>
		        <prop key="hibernate.c3p0.maxIdleTime">25000</prop>
		        <prop key="hibernate.c3p0.idle_test_period">120</prop> -->
				<!-- 后台显示sql语句 -->
				<prop key="hibernate.show_sql">false</prop>
				<prop key="format_sql">false</prop>

				<prop key="hibernate.generate_statistics">false</prop>
				<prop key="hibernate.use_sql_comments">false</prop>

				<!-- 数据库编码方式 -->
				<prop key="connection.characterEncoding">UTF-8</prop>

				<!-- 允许重新连接数据库 -->
				<prop key="hibernate.autoReconnect">true</prop>

				<!-- 每次都验证连接是否可用 -->
				<prop key="hibernate.c3p0.validate">false</prop>
			</props>
		</property>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />


	<!-- 开启 Spring 的事务处理,将hibernate的事务交给Spring的sessionFactory来管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 定时器配置 -->
	<task:executor id="myexecutor" pool-size="5"/>
	<task:annotation-driven executor="myexecutor"/>
	

  <!-- Spring 与 Mybatis 整合 -->	
	<!-- spring 与 mybatis 整合-采用接口org.apache.ibatis.session.SqlSession的实现类org.mybatis.spring.SqlSessionTemplate-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
	 	<property name="configLocation" value="classpath:mybatis/mybatis_core.xml" /> 
		<property name="mapperLocations">
			<array>
				<value>classpath*:mybatis/*Mapper.xml</value>
			</array>
		</property>
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!--通过Spring进行事务的管理，我们需要增加Spring注解的事务管理机制，只管理从dataSource数据源获得的con的事务，无法管理hibernate的Session中con的事务。 -->
	<bean id="transactionManagerMybatis" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 将上面的jdbc事务交给 之前申明的 Hibernate的对应的事务管理者来管理 -->
	<tx:advice id="transactionManagerMybatis" transaction-manager="transactionManager"/>
</beans>